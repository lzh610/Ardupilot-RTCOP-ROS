// Hello.lcpp
#import_lh "Hello.lh"
#include <ros/ros.h>
#include <stdio.h>
#include "gnc_functions.h"
#include "ActiveController.h"
using namespace gnc;
using namespace PLAM;
// base layer
baselayer
{
	// constructor
	Hello::Hello()
	{
	}

	// base method
	void Hello::Print()
	{
		ROS_INFO_STREAM("[RTCOP]:BaseClass");
	}

	void Hello::Flying(float x, float y){
		ROS_INFO_STREAM("[RTCOP]:Flying Base");
	}

}

//Ground Mode
layer Ground
{
	void Hello::Print()
	{
		ROS_INFO_STREAM("[RTCOP]:Ground Mode");
	}

	void Hello::Flying(float x, float y){
		ROS_INFO_STREAM("[RTCOP]:On the ground");
	}
}

//Flight Mode
layer Flight
{
	void Hello::Print()
	{
		ROS_INFO_STREAM("[RTCOP]:Flight Mode");
	}

	void Hello::Flying(float x, float y){
		ROS_INFO_STREAM("[RTCOP]:Flying");
		ros::Rate rate(1);
		//geometry_msgs::Point now_point = get_current_location();
		nextWayPoint.x = x;
		nextWayPoint.y = y;
		nextWayPoint.z = 12;
		nextWayPoint.psi = 0;
		set_destination(nextWayPoint.x,nextWayPoint.y,nextWayPoint.z,nextWayPoint.psi);

	}

	// アクティベート開始時に実行されるイベントハンドラ
	void OnActivating()
	{
		ros::Rate rate(1);
		takeoff(1); 
		nextWayPoint.x = 0;
		nextWayPoint.y = 0;
		nextWayPoint.z = 2;
		nextWayPoint.psi = 0;
		// waypointlist.push_back(nextWayPoint);
		ROS_INFO_STREAM("[RTCOP]:taking off");
		while(ros::ok()){ //横取り可能になる効果が見えやすいため、４秒ごとで１メートルを上昇すると設置した
			ros::spinOnce();
		    rate.sleep();
			break_point();
			sleep(1);
			break_point();
			sleep(1);
			break_point();
			sleep(1);
			break_point();
			sleep(1);
			break_point();			
			if(check_waypoint_reached() == 1){
				// ROS_INFO_STREAM()
				rate.sleep();
				nextWayPoint.z ++;
				set_destination(nextWayPoint.x,nextWayPoint.y,nextWayPoint.z,nextWayPoint.psi);
			}

			//地面から10メートル以上に達するなら飛行モードを完全に起動したと判定する
			if(nextWayPoint.z >= 10)
				break;
		}

	}

	// アクティベート終了時に実行されるイベントハンドラ
	void OnActivated()
	{
		ROS_INFO_STREAM("[RTCOP]:Flight Mode READY\n");
	}

	// ディアクティベート開始時に実行されるイベントハンドラ
	void OnDeactivating()
	{
		ROS_INFO_STREAM("[RTCOP]:Flight Mode Deactivating\n");
	}

	// ディアクティベート終了時に実行されるイベントハンドラ
	void OnDeactivated()
	{
		ROS_INFO_STREAM("[RTCOP]:Flight Mode Deactivated");
	}

}

//Nosignal Mode
layer Nosignal
{
	void Hello::Print()
	{
		ROS_INFO_STREAM("[RTCOP]:Nosignal Mode");
	}

	// アクティベート開始時に実行されるイベントハンドラ
	void OnActivating()
	{
		ROS_INFO_STREAM("[RTCOP]:NO SIGNAL!!WARNING!!");
		ros::Rate rate(1);
		rate.sleep();
		// land();
		nextWayPoint.x = 0;
		nextWayPoint.y = 0;
		nextWayPoint.z = 0;
		nextWayPoint.psi = 0;
		set_destination(nextWayPoint.x,nextWayPoint.y,nextWayPoint.z,nextWayPoint.psi);		
		ROS_INFO_STREAM("[RTCOP]:NO SIGNAL!!WARNING!!");
	}

	// アクティベート終了時に実行されるイベントハンドラ
	void OnActivated()
	{
		ROS_INFO_STREAM("[RTCOP]:Nosignal Mode READY\n");
	}

	// ディアクティベート開始時に実行されるイベントハンドラ
	void OnDeactivating()
	{
		ROS_INFO_STREAM("[RTCOP]:SIGNAL RECOVER!");
		// takeoff(1);
	}

	// ディアクティベート終了時に実行されるイベントハンドラ
	void OnDeactivated()
	{
		ROS_INFO_STREAM("[RTCOP]:SIGNAL RECOVER");
	}

}